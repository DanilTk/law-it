name: Deploy Non-Prod

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment'
        required: true
        type: choice
        options:
          - dev
          - test

jobs:
  build_and_test_artifact:
    uses: ./.github/workflows/reusable-build-and-test.yaml

  build_image_and_publish:
    needs: build_and_test_artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_test.outputs.artifact_name }}
          path: application/target

      - id: slug
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: üê≥ Build Docker image
        id: build_docker_image
        run: |
          echo "Building Docker image..."
          docker buildx build --load \
            --tag ${{ secrets.DO_REGISTRY_URL }}/${{ github.event.repository.name }}:${{ env.SHORT_SHA }} \
            --tag ${{ secrets.DO_REGISTRY_URL }}/${{ github.event.repository.name }}:latest \
            -f ./Dockerfile .

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DO_REGISTRY_URL }}
          username: ${{ secrets.DO_REGISTRY_USERNAME }}
          password: ${{ secrets.DO_REGISTRY_PASSWORD }}

      - name: üê≥ Publish Docker image
        id: publish_docker_image
        run: |
          echo "Pushing Docker image to registry..."
          docker push ${{ secrets.DO_REGISTRY_URL }}/${{ github.event.repository.name }}:${{ env.SHORT_SHA }}
          docker push ${{ secrets.DO_REGISTRY_URL }}/${{ github.event.repository.name }}:latest

      - name: Cleanup artifact
        if: ${{ steps.publish_docker_image.outcome == 'success' }}
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ needs.build_and_test_artifact.outputs.artifact_name }}

      - name: Cleanup resources
        if: ${{ steps.publish_docker_image.outcome == 'success' }}
        run: |
          rm -rf application/target
          docker system prune -f
